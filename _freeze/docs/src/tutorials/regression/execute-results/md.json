{
  "hash": "98c1ab1e86df8b4609b352140d0361d5",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = LaplaceRedux\n```\n\n\n\n## Data\n\nWe first generate some synthetic data:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing LaplaceRedux.Data\nn = 300       # number of observations\nσtrue = 0.30  # true observational noise\nx, y = Data.toy_data_regression(n;noise=σtrue)\nxs = [[x] for x in x]\nX = permutedims(x)\n```\n:::\n\n\n## MLP\n\nWe set up a model and loss with weight regularization:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ndata = zip(xs,y)\nn_hidden = 50\nD = size(X,1)\nnn = Chain(\n    Dense(D, n_hidden, tanh),\n    Dense(n_hidden, 1)\n)  \nloss(x, y) = Flux.Losses.mse(nn(x), y)\n```\n:::\n\n\nWe train the model:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nusing Flux.Optimise: update!, Adam\nopt = Adam(1e-3)\nepochs = 1000\navg_loss(data) = mean(map(d -> loss(d[1],d[2]), data))\nshow_every = epochs/10\n\nfor epoch = 1:epochs\n  for d in data\n    gs = gradient(Flux.params(nn)) do\n      l = loss(d...)\n    end\n    update!(opt, Flux.params(nn), gs)\n  end\n  if epoch % show_every == 0\n    println(\"Epoch \" * string(epoch))\n    @show avg_loss(data)\n  end\nend\n```\n:::\n\n\n## Laplace Approximation\n\nLaplace approximation can be implemented as follows:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nsubset_w = :all\nla = Laplace(nn; likelihood=:regression, subset_of_weights=subset_w)\nfit!(la, data)\nplot(la, X, y; zoom=-5, size=(400,400))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](regression_files/figure-commonmark/cell-6-output-1.svg){}\n:::\n:::\n\n\nNext we optimize the prior precision $P_0$ and and observational noise $\\sigma$ using Empirical Bayes:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\noptimize_prior!(la; verbose=true)\nplot(la, X, y; zoom=-5, size=(400,400))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nloss(exp.(logP₀), exp.(logσ)) = 115.89970006409075\nLog likelihood: -78.9395891640363\nLog det ratio: 41.59099583534049\nScatter: 32.329225964768405\nloss(exp.(logP₀), exp.(logσ)) = 117.64871821240808\nLog likelihood: -86.21271638531181\nLog det ratio: 47.02391032864642\nScatter: 15.848093325546113\nloss(exp.(logP₀), exp.(logσ)) = 99.0503686829033\nLog likelihood: -68.6539632244081\nLog det ratio: 50.50904634071264\nScatter: 10.283764576277756\nloss(exp.(logP₀), exp.(logσ)) = 97.95806446351698\nLog likelihood: -67.6630665366047\nLog det ratio: 52.31062172238063\nScatter: 8.27937413144392\nloss(exp.(logP₀), exp.(logσ)) = 97.87638521130879\nLog likelihood: -67.56210824487965\nLog det ratio: 52.99651119671768\nScatter: 7.632042736140583\nloss(exp.(logP₀), exp.(logσ)) = 97.0348007783304\nLog likelihood: -66.71699326917162\nLog det ratio: 53.06607882969837\nScatter: 7.569536188619179\nloss(exp.(logP₀), exp.(logσ)) = 96.90880533777283\nLog likelihood: -66.60043898495907\nLog det ratio: 52.86479666828444\nScatter: 7.751936037343088\nloss(exp.(logP₀), exp.(logσ)) = 96.92278577215899\nLog likelihood: -66.62313517903836\nLog det ratio: 52.601352698984954\nScatter: 7.997948487256308\nloss(exp.(logP₀), exp.(logσ)) = 96.90753961129343\nLog likelihood: -66.6118899797289\nLog det ratio: 52.382272284239775\nScatter: 8.20902697888927\nloss(exp.(logP₀), exp.(logσ)) = 96.8946599908052\nLog likelihood: -66.59997317019008\nLog det ratio: 52.24377877042417\nScatter: 8.345594870806066\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](regression_files/figure-commonmark/cell-7-output-2.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "regression_files"
    ],
    "filters": []
  }
}